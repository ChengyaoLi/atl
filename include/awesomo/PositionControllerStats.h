// Generated by gencpp from file awesomo/PositionControllerStats.msg
// DO NOT EDIT!


#ifndef AWESOMO_MESSAGE_POSITIONCONTROLLERSTATS_H
#define AWESOMO_MESSAGE_POSITIONCONTROLLERSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace awesomo
{
template <class ContainerAllocator>
struct PositionControllerStats_
{
  typedef PositionControllerStats_<ContainerAllocator> Type;

  PositionControllerStats_()
    : header()
    , roll_p_error(0.0)
    , roll_i_error(0.0)
    , roll_d_error(0.0)
    , roll_input(0.0)
    , roll_output(0.0)
    , roll_setpoint(0.0)
    , pitch_p_error(0.0)
    , pitch_i_error(0.0)
    , pitch_d_error(0.0)
    , pitch_input(0.0)
    , pitch_output(0.0)
    , pitch_setpoint(0.0)
    , throttle_p_error(0.0)
    , throttle_i_error(0.0)
    , throttle_d_error(0.0)
    , throttle_input(0.0)
    , throttle_output(0.0)
    , throttle_setpoint(0.0)  {
    }
  PositionControllerStats_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll_p_error(0.0)
    , roll_i_error(0.0)
    , roll_d_error(0.0)
    , roll_input(0.0)
    , roll_output(0.0)
    , roll_setpoint(0.0)
    , pitch_p_error(0.0)
    , pitch_i_error(0.0)
    , pitch_d_error(0.0)
    , pitch_input(0.0)
    , pitch_output(0.0)
    , pitch_setpoint(0.0)
    , throttle_p_error(0.0)
    , throttle_i_error(0.0)
    , throttle_d_error(0.0)
    , throttle_input(0.0)
    , throttle_output(0.0)
    , throttle_setpoint(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _roll_p_error_type;
  _roll_p_error_type roll_p_error;

   typedef float _roll_i_error_type;
  _roll_i_error_type roll_i_error;

   typedef float _roll_d_error_type;
  _roll_d_error_type roll_d_error;

   typedef float _roll_input_type;
  _roll_input_type roll_input;

   typedef float _roll_output_type;
  _roll_output_type roll_output;

   typedef float _roll_setpoint_type;
  _roll_setpoint_type roll_setpoint;

   typedef float _pitch_p_error_type;
  _pitch_p_error_type pitch_p_error;

   typedef float _pitch_i_error_type;
  _pitch_i_error_type pitch_i_error;

   typedef float _pitch_d_error_type;
  _pitch_d_error_type pitch_d_error;

   typedef float _pitch_input_type;
  _pitch_input_type pitch_input;

   typedef float _pitch_output_type;
  _pitch_output_type pitch_output;

   typedef float _pitch_setpoint_type;
  _pitch_setpoint_type pitch_setpoint;

   typedef float _throttle_p_error_type;
  _throttle_p_error_type throttle_p_error;

   typedef float _throttle_i_error_type;
  _throttle_i_error_type throttle_i_error;

   typedef float _throttle_d_error_type;
  _throttle_d_error_type throttle_d_error;

   typedef float _throttle_input_type;
  _throttle_input_type throttle_input;

   typedef float _throttle_output_type;
  _throttle_output_type throttle_output;

   typedef float _throttle_setpoint_type;
  _throttle_setpoint_type throttle_setpoint;




  typedef boost::shared_ptr< ::awesomo::PositionControllerStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::awesomo::PositionControllerStats_<ContainerAllocator> const> ConstPtr;

}; // struct PositionControllerStats_

typedef ::awesomo::PositionControllerStats_<std::allocator<void> > PositionControllerStats;

typedef boost::shared_ptr< ::awesomo::PositionControllerStats > PositionControllerStatsPtr;
typedef boost::shared_ptr< ::awesomo::PositionControllerStats const> PositionControllerStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::awesomo::PositionControllerStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::awesomo::PositionControllerStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace awesomo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'awesomo': ['/home/chutsu/catkin_ws/src/awesomo/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::awesomo::PositionControllerStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::awesomo::PositionControllerStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::awesomo::PositionControllerStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::awesomo::PositionControllerStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::awesomo::PositionControllerStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::awesomo::PositionControllerStats_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::awesomo::PositionControllerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "402c4243c9febe0e220263978d73078d";
  }

  static const char* value(const ::awesomo::PositionControllerStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x402c4243c9febe0eULL;
  static const uint64_t static_value2 = 0x220263978d73078dULL;
};

template<class ContainerAllocator>
struct DataType< ::awesomo::PositionControllerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "awesomo/PositionControllerStats";
  }

  static const char* value(const ::awesomo::PositionControllerStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::awesomo::PositionControllerStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
float32 roll_p_error\n\
float32 roll_i_error\n\
float32 roll_d_error\n\
float32 roll_input\n\
float32 roll_output\n\
float32 roll_setpoint\n\
\n\
float32 pitch_p_error\n\
float32 pitch_i_error\n\
float32 pitch_d_error\n\
float32 pitch_input\n\
float32 pitch_output\n\
float32 pitch_setpoint\n\
\n\
float32 throttle_p_error\n\
float32 throttle_i_error\n\
float32 throttle_d_error\n\
float32 throttle_input\n\
float32 throttle_output\n\
float32 throttle_setpoint\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::awesomo::PositionControllerStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::awesomo::PositionControllerStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll_p_error);
      stream.next(m.roll_i_error);
      stream.next(m.roll_d_error);
      stream.next(m.roll_input);
      stream.next(m.roll_output);
      stream.next(m.roll_setpoint);
      stream.next(m.pitch_p_error);
      stream.next(m.pitch_i_error);
      stream.next(m.pitch_d_error);
      stream.next(m.pitch_input);
      stream.next(m.pitch_output);
      stream.next(m.pitch_setpoint);
      stream.next(m.throttle_p_error);
      stream.next(m.throttle_i_error);
      stream.next(m.throttle_d_error);
      stream.next(m.throttle_input);
      stream.next(m.throttle_output);
      stream.next(m.throttle_setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PositionControllerStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::awesomo::PositionControllerStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::awesomo::PositionControllerStats_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "roll_p_error: ";
    Printer<float>::stream(s, indent + "  ", v.roll_p_error);
    s << indent << "roll_i_error: ";
    Printer<float>::stream(s, indent + "  ", v.roll_i_error);
    s << indent << "roll_d_error: ";
    Printer<float>::stream(s, indent + "  ", v.roll_d_error);
    s << indent << "roll_input: ";
    Printer<float>::stream(s, indent + "  ", v.roll_input);
    s << indent << "roll_output: ";
    Printer<float>::stream(s, indent + "  ", v.roll_output);
    s << indent << "roll_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.roll_setpoint);
    s << indent << "pitch_p_error: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_p_error);
    s << indent << "pitch_i_error: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_i_error);
    s << indent << "pitch_d_error: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_d_error);
    s << indent << "pitch_input: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_input);
    s << indent << "pitch_output: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_output);
    s << indent << "pitch_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_setpoint);
    s << indent << "throttle_p_error: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_p_error);
    s << indent << "throttle_i_error: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_i_error);
    s << indent << "throttle_d_error: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_d_error);
    s << indent << "throttle_input: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_input);
    s << indent << "throttle_output: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_output);
    s << indent << "throttle_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AWESOMO_MESSAGE_POSITIONCONTROLLERSTATS_H
